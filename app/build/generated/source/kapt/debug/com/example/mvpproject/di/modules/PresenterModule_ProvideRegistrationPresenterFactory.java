// Generated by Dagger (https://dagger.dev).
package com.example.mvpproject.di.modules;

import com.example.mvpproject.domain.LoginRepository;
import com.example.mvpproject.ui.registration.RegistrationContract;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PresenterModule_ProvideRegistrationPresenterFactory implements Factory<RegistrationContract.Presenter> {
  private final PresenterModule module;

  private final Provider<LoginRepository> repositoryProvider;

  public PresenterModule_ProvideRegistrationPresenterFactory(PresenterModule module,
      Provider<LoginRepository> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public RegistrationContract.Presenter get() {
    return provideRegistrationPresenter(module, repositoryProvider.get());
  }

  public static PresenterModule_ProvideRegistrationPresenterFactory create(PresenterModule module,
      Provider<LoginRepository> repositoryProvider) {
    return new PresenterModule_ProvideRegistrationPresenterFactory(module, repositoryProvider);
  }

  public static RegistrationContract.Presenter provideRegistrationPresenter(
      PresenterModule instance, LoginRepository repository) {
    return Preconditions.checkNotNullFromProvides(instance.provideRegistrationPresenter(repository));
  }
}
