// Generated by Dagger (https://dagger.dev).
package com.example.mvpproject.di.modules;

import android.app.Application;
import com.example.mvpproject.domain.Storage.UserDataBase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataBaseModule_ProvideUserDataBaseFactory implements Factory<UserDataBase> {
  private final DataBaseModule module;

  private final Provider<Application> applicationProvider;

  public DataBaseModule_ProvideUserDataBaseFactory(DataBaseModule module,
      Provider<Application> applicationProvider) {
    this.module = module;
    this.applicationProvider = applicationProvider;
  }

  @Override
  public UserDataBase get() {
    return provideUserDataBase(module, applicationProvider.get());
  }

  public static DataBaseModule_ProvideUserDataBaseFactory create(DataBaseModule module,
      Provider<Application> applicationProvider) {
    return new DataBaseModule_ProvideUserDataBaseFactory(module, applicationProvider);
  }

  public static UserDataBase provideUserDataBase(DataBaseModule instance, Application application) {
    return Preconditions.checkNotNullFromProvides(instance.provideUserDataBase(application));
  }
}
